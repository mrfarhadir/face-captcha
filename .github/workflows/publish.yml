name: Build, Tag, and Release on Merge to Main

on:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  build-tag-release:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the repository
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: Set up Node.js environment
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'

      # Step 3: Install dependencies
      - name: Install dependencies
        run: npm install

      # Step 4: Run the build script to generate dist directory
      - name: Build project
        run: npm run build

      # Step 5: Bump the version in package.json and create a new tag
      - name: Bump version and create tag
        id: bump_version
        run: |
          # Choose the type of version bump: patch, minor, major
          NEW_VERSION=$(npm version patch -m "chore(release): %s")
          NEW_VERSION=${NEW_VERSION#*v}  # Remove 'v' if present
          echo "NEW_VERSION=${NEW_VERSION}" >> $GITHUB_ENV

      # Step 6: Debugging step to output the new version
      - name: Debug NEW_VERSION
        run: echo "The new version is ${{ env.NEW_VERSION }}"

      # Step 7: Push the new tag to the repository
      - name: Push tag
        run: |
          git push origin --tags
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Step 8: Create a GitHub Release with the new tag and attach dist contents
      - name: Create GitHub Release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ env.NEW_VERSION }}
          release_name: Release ${{ env.NEW_VERSION }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Step 9: Upload dist directory to the release
      - name: Upload dist folder to release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: ./dist
          asset_name: dist.zip
          asset_content_type: application/zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
